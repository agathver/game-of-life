/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.example.gameoflife;

import org.testng.annotations.Test;

import static org.testng.Assert.*;

public class GenerationTest {
    @Test
    public void gridIsInitiallyEmpty() {
        var generation = new Generation();
        assertEquals(generation.getCellCount(), 0);
    }

    @Test
    public void spawnActuallySpawnsACell() {
        var generation = new Generation();
        generation.spawn(1, 1);
        assertEquals(generation.getCellCount(), 1);
    }

    @Test
    public void isCellAliveWorks() {
        var generation = new Generation();
        generation.spawn(1, 1);
        assert (generation.isCellAlive(1, 1));
    }

    @Test
    public void spawnCreatesMultipleCells() {
        var g = new Generation();
        g.spawn(1, 1);
        g.spawn(2, 2);
        g.spawn(1, 2);
        g.spawn(2, 5);
        g.spawn(2, 26);

        assertEquals(g.getCellCount(), 5);

        assert (g.isCellAlive(1, 1));
        assert (g.isCellAlive(2, 2));
        assert (g.isCellAlive(1, 2));
        assert (g.isCellAlive(2, 5));
        assert (g.isCellAlive(2, 26));
    }

    @Test
    public void killActuallyKillsCells() {
        var generation = new Generation();
        generation.spawn(1, 1);
        generation.kill(1, 1);
        assertFalse(generation.isCellAlive(1, 1));
    }

    @Test
    public void killLeavesCellBodyIntact() {
        var generation = new Generation();
        generation.spawn(1, 1);
        generation.kill(1, 1);

        assertFalse(generation.getGrid().get(1).get(1));
    }

    @Test
    public void clonePerformsDeepClone() {
        var g = new Generation();
        g.spawn(1, 1);
        g.spawn(1, 2);
        g.spawn(2, 2);

        g.kill(1, 2);

        var g2 = g.clone();

        assertEquals(g.isCellAlive(1, 1), g2.isCellAlive(1, 1));
        assertEquals(g.isCellAlive(1, 2), g2.isCellAlive(1, 2));
        assertEquals(g.isCellAlive(2, 2), g2.isCellAlive(2, 2));

        g.spawn(3, 3);
        assertFalse(g2.isCellAlive(3, 3));

        g2.spawn(4, 4);
        assertFalse(g.isCellAlive(4, 4));

        g.kill(1, 1);
        assertTrue(g2.isCellAlive(1, 1));

        g2.kill(2, 2);
        assertTrue(g.isCellAlive(2, 2));
    }
}
